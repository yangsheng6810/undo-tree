* FAQ
** What this is?
   This is a fork for the famous =undo-tree= by Toby S. Cubitt
** Why do you fork it?
   =undo-tree= stops working from time to time, sometimes unexpectedly with all undo history lost. I need a more robust one. Since development seems inactive since the last release 0.6.6 on July 6, 2017, I feel it might be a good idea to make a fork myself, and fix bugs as I come across.
** What is the target of this fork?
   1. Stay close to the original undo-tree
   2. Mainly bug fixes
   3. Add tests to make it robust enough
** What might change (break compatibility with the original =undo-tree=)?
   1. The format of the saved undo history. The current history save is just a hash of the file when the undo history was saved, concatenating with a flatted ~buffer-undo-tree~ (printed with ~prin1~). This
** What will not be fixed?
   Since I do not use the ~undo-in-region~ feature, and this has been known as a source of instability for undo-tree. I am not going to look into it, at least not in the near future.
** Who are you?
   Someone who loves emacs, knows programming, but new to emacs-lisp.
* Progress
** DONE Scan for infinite loops
** TODO Fix tree-size calculation
   The tree-size maintaining part seems buggy. The size of an undo-tree is not always the same as the value maintained in the data-structure.
   - [X] Fixed cons size: on 32-bit emacs, the size of a cons is 8, but on 64-bit emacs, it is 16.
   - [X] The size of undo-list is not calculated the same as in C source.
   - [ ] Fix size calculation when a marker is garbage collected.
** TODO Fix save/load history
   - [X] Add function to clean out markers that have been garbage collected, call it before saving and after restoring history.
   - [ ] More problems may appear.
** TODO Fix history discard
   - [X] Clean up garbage collected markers before actually discarding history.
** TODO Debugging and testing facilities
   - [X] Add function to calculate the size of the undo-tree.
   - [X] Add function to print out the whole undo-tree in a clearer way.
